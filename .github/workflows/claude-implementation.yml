name: Claude Issue Implementation

on:
  issue_comment:
    types: [created]

jobs:
  implement-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/claude-implement')
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue information
        run: |
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --json title -q .title)
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          
          # Add "in_progress" label to issue if it exists
          gh issue edit $ISSUE_NUMBER --add-label "in_progress" || echo "Label may not exist or already applied"
          
          # Update project board status
          if [ -n "${{ secrets.PROJECT_ID }}" ]; then
            echo "Updating project board status..."
            
            # Get item ID using GraphQL
            ITEM_ID=$(gh api graphql -f query='
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: ${{ secrets.PROJECT_ID }}) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                    field(name: "Status") {
                      ... on ProjectV2SingleSelectField {
                        id
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }' -f org="idynic" -f number=$ISSUE_NUMBER --jq '.data.organization.projectV2.items.nodes[] | select(.content.number == '"$ISSUE_NUMBER"') | .id')
            
            if [ -z "$ITEM_ID" ]; then
              echo "Issue #$ISSUE_NUMBER not found in project board"
            else
              echo "Found issue in project with item ID: $ITEM_ID"
              
              # Get status field ID
              STATUS_FIELD=$(gh api graphql -f query='
                query($org: String!) {
                  organization(login: $org) {
                    projectV2(number: ${{ secrets.PROJECT_ID }}) {
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }' -f org="idynic" --jq '.data.organization.projectV2.field')
              
              STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
              IN_PROGRESS_OPTION=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "In Progress")')
              IN_PROGRESS_ID=$(echo "$IN_PROGRESS_OPTION" | jq -r '.id')
              
              if [ -z "$IN_PROGRESS_ID" ]; then
                echo "Could not find 'In Progress' status option"
              else
                echo "Setting status to 'In Progress'"
                
                # Update status
                gh api graphql -f query='
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }' -f projectId="$(gh api graphql -f query='query($org: String!) {organization(login: $org) {projectV2(number: ${{ secrets.PROJECT_ID }}) {id}}}' -f org="idynic" --jq '.data.organization.projectV2.id')" \
                     -f itemId="$ITEM_ID" \
                     -f fieldId="$STATUS_FIELD_ID" \
                     -f optionId="$IN_PROGRESS_ID"
                
                echo "Project board status updated to 'In Progress'"
              fi
            fi
          else
            echo "No PROJECT_ID secret found, skipping project board update"
          fi
          
          # Comment on issue
          gh issue comment $ISSUE_NUMBER --body "ðŸ¤– Claude has started working on this issue. Implementation in progress..."
          
          # Create branch
          BRANCH_NAME="issue-${ISSUE_NUMBER}-implementation"
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          git checkout -b $BRANCH_NAME
          git push -u origin $BRANCH_NAME
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Prepare prompt file
        run: |
          mkdir -p /tmp/claude-prompts
          cp .github/prompts/implement-issue.txt /tmp/claude-prompts/
          
          # Add issue-specific context to the prompt
          echo "Issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" >> /tmp/claude-prompts/issue-context.txt
          echo "Repository: ${{ github.repository }}" >> /tmp/claude-prompts/issue-context.txt
          echo "Branch: ${{ env.BRANCH_NAME }}" >> /tmp/claude-prompts/issue-context.txt
          
          cat /tmp/claude-prompts/issue-context.txt /tmp/claude-prompts/implement-issue.txt > /tmp/claude-prompts/final-prompt.txt
      
      - name: Run Claude Code
        uses: ./.github/actions/claude-code-action
        with:
          prompt_file: /tmp/claude-prompts/final-prompt.txt
          allowed_tools: "Bash,Read,Write,Edit,Grep,mcp__github__get_issue,mcp__github__get_issue_comments"
          install_github_mcp: "true"
          timeout_minutes: "30"
          anthropic_api_key: "${{ secrets.ANTHROPIC_API_KEY }}"
          github_token: "${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}"
      
      - name: Create PR
        run: |
          # Create test file to verify PR creation
          echo "# Implementation for issue #${{ env.ISSUE_NUMBER }}" > implementation.md
          
          # Commit and push
          git add implementation.md
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git commit -m "Implement solution for issue #${{ env.ISSUE_NUMBER }}"
          git push -u origin ${{ env.BRANCH_NAME }}
          
          # Prepare PR body
          echo "Fixes #${{ env.ISSUE_NUMBER }}" > /tmp/pr-body.md
          echo "" >> /tmp/pr-body.md
          echo "## Implementation by Claude Code" >> /tmp/pr-body.md
          
          # Create PR
          PR_URL=$(gh pr create --title "Fix #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" --body-file /tmp/pr-body.md --base main)
          
          # Comment with result
          gh issue comment ${{ env.ISSUE_NUMBER }} --body "âœ… Implementation completed and PR submitted: $PR_URL"
          
          # Update project board status to "Review" if project board integration is enabled
          if [ -n "${{ secrets.PROJECT_ID }}" ]; then
            echo "Updating project board status to 'Review'..."
            
            # Get item ID
            ITEM_ID=$(gh api graphql -f query='
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: ${{ secrets.PROJECT_ID }}) {
                    items(first: 100) {
                      nodes {
                        id
                        content {
                          ... on Issue {
                            number
                          }
                        }
                      }
                    }
                  }
                }
              }' -f org="idynic" -f number="${{ env.ISSUE_NUMBER }}" --jq '.data.organization.projectV2.items.nodes[] | select(.content.number == '"${{ env.ISSUE_NUMBER }}"') | .id')
            
            if [ -n "$ITEM_ID" ]; then
              # Get status field and in review option
              STATUS_FIELD=$(gh api graphql -f query='
                query($org: String!) {
                  organization(login: $org) {
                    projectV2(number: ${{ secrets.PROJECT_ID }}) {
                      field(name: "Status") {
                        ... on ProjectV2SingleSelectField {
                          id
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }' -f org="idynic" --jq '.data.organization.projectV2.field')
              
              STATUS_FIELD_ID=$(echo "$STATUS_FIELD" | jq -r '.id')
              IN_REVIEW_OPTION=$(echo "$STATUS_FIELD" | jq -r '.options[] | select(.name == "Review")')
              IN_REVIEW_ID=$(echo "$IN_REVIEW_OPTION" | jq -r '.id')
              
              if [ -n "$IN_REVIEW_ID" ]; then
                # Get project ID
                PROJECT_ID=$(gh api graphql -f query='
                  query($org: String!) {
                    organization(login: $org) {
                      projectV2(number: ${{ secrets.PROJECT_ID }}) {
                        id
                      }
                    }
                  }' -f org="idynic" --jq '.data.organization.projectV2.id')
                
                # Update status to "Review"
                gh api graphql -f query='
                  mutation($projectId: ID!, $itemId: ID!, $fieldId: ID!, $optionId: String!) {
                    updateProjectV2ItemFieldValue(input: {
                      projectId: $projectId
                      itemId: $itemId
                      fieldId: $fieldId
                      value: { 
                        singleSelectOptionId: $optionId
                      }
                    }) {
                      projectV2Item {
                        id
                      }
                    }
                  }' -f projectId="$PROJECT_ID" -f itemId="$ITEM_ID" -f fieldId="$STATUS_FIELD_ID" -f optionId="$IN_REVIEW_ID"
                
                echo "Project board status updated to 'Review'"
              else
                echo "Could not find 'Review' status option in project board"
              fi
            else
              echo "Could not find issue in project board"
            fi
          fi
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}