name: Claude Issue Implementation

on:
  issue_comment:
    types: [created]

jobs:
  implement-issue:
    runs-on: ubuntu-latest
    if: contains(github.event.comment.body, '/claude-implement') || 
        contains(github.event.comment.body, '🚀') || 
        contains(github.event.comment.body, '/claude-analyze-prd')
    permissions:
      contents: write
      pull-requests: write
      issues: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Get issue information and update status
        run: |
          # Get issue number from the comment
          ISSUE_NUMBER="${{ github.event.issue.number }}"
          ISSUE_TITLE=$(gh issue view $ISSUE_NUMBER --json title -q .title)
          echo "ISSUE_NUMBER=$ISSUE_NUMBER" >> $GITHUB_ENV
          echo "ISSUE_TITLE=$ISSUE_TITLE" >> $GITHUB_ENV
          
          # Determine mode based on comment
          if [[ "${{ github.event.comment.body }}" == *"/claude-analyze-prd"* ]]; then
            echo "MODE=analyze" >> $GITHUB_ENV
            
            # Add "analyzing" label if it exists
            gh issue edit $ISSUE_NUMBER --add-label "analyzing" || echo "Label may not exist or already applied"
            
            # Comment that analysis has started
            gh issue comment $ISSUE_NUMBER --body "🔍 Claude is analyzing the PRD for repository impact..."
            
            # No need to create a branch for analysis mode
          else
            echo "MODE=implement" >> $GITHUB_ENV
            
            # Add "in-progress" label if it exists
            gh issue edit $ISSUE_NUMBER --add-label "in-progress" || echo "Label may not exist or already applied"
            
            # Comment that work has started
            gh issue comment $ISSUE_NUMBER --body "🤖 Claude has started working on this issue. Implementation in progress..."
            
            # Create and switch to implementation branch
            BRANCH_NAME="issue-${ISSUE_NUMBER}-implementation"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
            git checkout -b $BRANCH_NAME
            git push -u origin $BRANCH_NAME
          fi
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}
          
      - name: Prepare prompt file
        run: |
          mkdir -p /tmp/claude-prompts
          
          # Determine prompt type based on comment
          if [[ "${{ env.MODE }}" == "analyze" ]]; then
            # Copy analysis prompt
            cp .github/prompts/analyze-prd.txt /tmp/claude-prompts/
            
            # Add issue-specific context to the prompt
            echo "Issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" >> /tmp/claude-prompts/issue-context.txt
            echo "Repository: ${{ github.repository }}" >> /tmp/claude-prompts/issue-context.txt
            
            # Add repository map for context
            echo "===== REPOSITORY MAP START =====" >> /tmp/claude-prompts/issue-context.txt
            cat docs/REPOSITORY_MAP.md >> /tmp/claude-prompts/issue-context.txt
            echo "===== REPOSITORY MAP END =====" >> /tmp/claude-prompts/issue-context.txt
            
            # Extract PRD content from issue or PR (simplified, assume it's in the issue)
            echo "===== PRD CONTENT START =====" >> /tmp/claude-prompts/issue-context.txt
            gh issue view ${{ env.ISSUE_NUMBER }} --json body -q .body >> /tmp/claude-prompts/issue-context.txt
            echo "===== PRD CONTENT END =====" >> /tmp/claude-prompts/issue-context.txt
            
            # Combine files
            cat /tmp/claude-prompts/issue-context.txt /tmp/claude-prompts/analyze-prd.txt > /tmp/claude-prompts/final-prompt.txt
          else
            # Copy implementation prompt
            cp .github/prompts/implement-issue.txt /tmp/claude-prompts/
            
            # Add issue-specific context to the prompt
            echo "Issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" >> /tmp/claude-prompts/issue-context.txt
            echo "Repository: ${{ github.repository }}" >> /tmp/claude-prompts/issue-context.txt
            echo "Branch: ${{ env.BRANCH_NAME }}" >> /tmp/claude-prompts/issue-context.txt
            
            # Combine files
            cat /tmp/claude-prompts/issue-context.txt /tmp/claude-prompts/implement-issue.txt > /tmp/claude-prompts/final-prompt.txt
          fi
      
      - name: Run Claude Code
        uses: ./.github/actions/claude-code-action
        with:
          prompt_file: /tmp/claude-prompts/final-prompt.txt
          allowed_tools: "Bash,Read,Write,Edit,Grep,mcp__github__get_issue,mcp__github__get_issue_comments,mcp__github__search_repositories"
          install_github_mcp: "true"
          timeout_minutes: "30"
          output_file: "/tmp/claude-output.md"
          anthropic_api_key: "${{ secrets.ANTHROPIC_API_KEY }}"
          github_token: "${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}"
      
      - name: Process Claude's output
        run: |
          # Process based on mode
          if [[ "${{ env.MODE }}" == "analyze" ]]; then
            # For analysis mode, we just post the analysis as a comment
            echo "Posting PRD analysis as a comment..."
            
            # Read Claude's analysis output from file
            ANALYSIS_CONTENT=$(cat /tmp/claude-output.md)
            
            # If the output file is empty, provide a fallback message
            if [ -z "$ANALYSIS_CONTENT" ]; then
              ANALYSIS_CONTENT="Claude was unable to complete the analysis. Please check the workflow logs for details."
            fi
            
            # Post the analysis as a comment
            gh issue comment ${{ env.ISSUE_NUMBER }} --body "## PRD Repository Impact Analysis 📊

$ANALYSIS_CONTENT

*This analysis was generated by Claude based on your PRD and repository map.*"
            
          else
            # Implementation mode - create PR with code changes
            # Fetch the latest changes
            git fetch origin
            
            # Check if any changes were made (either uncommitted or committed)
            UNCOMMITTED_CHANGES=$(git status -s)
            COMMITTED_CHANGES=$(git log --format=%H -n 1 origin/main..${{ env.BRANCH_NAME }} 2>/dev/null || echo "")
            
            if [[ -z "$UNCOMMITTED_CHANGES" ]] && [[ -z "$COMMITTED_CHANGES" ]]; then
              echo "No changes were made by Claude."
              gh issue comment ${{ env.ISSUE_NUMBER }} --body "❌ Claude was unable to implement a solution for this issue. No changes were made."
              exit 1
            fi
            
            # If there are uncommitted changes, commit them
            if [[ ! -z "$UNCOMMITTED_CHANGES" ]]; then
              echo "Committing changes made by Claude..."
              git add .
              git config user.name "GitHub Actions"
              git config user.email "actions@github.com"
              git commit -m "Fix issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}"
              git push -u origin ${{ env.BRANCH_NAME }}
            else
              echo "Changes were already committed by Claude."
            fi
            
            # Create PR body file
            cat > /tmp/pr-body.md << EOF
            Fixes #${{ env.ISSUE_NUMBER }}

            ## Changes
            - Implemented solution for issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}
            - Implemented by Claude Code

            ## Implementation Notes
            - This PR was created automatically by Claude Code
            - Please review the changes carefully
            EOF
            
            # Create PR using PROJECT_TOKEN
            PR_URL=$(gh pr create --title "Fix issue #${{ env.ISSUE_NUMBER }}: ${{ env.ISSUE_TITLE }}" --body-file /tmp/pr-body.md --base main)
            
            # Comment with result
            gh issue comment ${{ env.ISSUE_NUMBER }} --body "✅ Implementation completed and PR submitted: $PR_URL"
          fi
        env:
          GH_TOKEN: ${{ secrets.PROJECT_TOKEN || secrets.GITHUB_TOKEN }}